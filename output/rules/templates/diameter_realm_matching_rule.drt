template header
ruleType
ruleId
name
version
ruleCategory
ruleSubcategory
evaluationRule
actionId
ruleFlowGroup
enabled
salience
applicabilityCriteria

package com.evolvedintelligence.engine.sigfirewall.diameter.datamodel;

import com.evolvedintelligence.engine.sigfirewall.diameter.datamodel.DiameterMessage;
import com.evolvedintelligence.engine.sigfirewall.diameter.datamodel.rule.SigFirewallDiameterRuleResultSet;

template "diameter_realm_matching_rule"

rule "Diameter_Realm_Matching_Rule(@{ruleId}_@{row.rowNumber})"
agenda-group "@{ruleFlowGroup}"
lock-on-active
salience(@{salience})
    when

        // Rule Results
        $results : SigFirewallDiameterRuleResultSet( )

        // Diameter Message
        $msg : DiameterMessage(
                            isRequest() == true,
                            $originHost : originHost != null,
                            $originHost.getRealmName() != null,
                            $originRealm : originRealm != null,
                            $originRealm.getName() != null,
                            $tenant : tenant != null,
                            $tenant.applicable( "@{applicabilityCriteria}", originRealm, originHost, subscriber ) == true )

    then
        // Only record the failure if the message is not already blocked
        if ( $results.getIsAllowed() )
        {
            if ( !$originHost.getRealmName().equalsIgnoreCase($originRealm.getName()) )
            {
                modify( $results )  { add("@{ruleId}", @{ruleType}, @{actionId}l,
                                          "@{ruleCategory}", "@{ruleSubcategory}", @{evaluationRule}) };
            }
        }
end

end template