# port we're listening on
ewok.peer.serverPort:15102

# How often the idleness check is performed on a connection
ewok.peer.idleTimeSeconds:1

# Switch for sending heartbeats
ewok.server.sendHeartbeats:true

# Frequency with which we purge the timer queue of expired tasks
ewok.server.timerPurgeIntervalSeconds:30

# The maximum inactivity period on a connection before we kill it
ewok.server.maxInactivityIntervalSeconds:10

# Interval between heartbeats
ewok.server.heartbeatIntervalSeconds:1

# How often to reload the loaddirector-log4j-reload.properties
loglevelReloadTimeSeconds:60

# RULES
#
# Available mandatory parameters that can be used in rules (in addition to any extra
# ones provided in custom rules) are:
#
#	int nst - node status (AVAILABLE:0, UNAVAILABLE:1, NO_NEW_SESSIONS:2)
#	varchar ip - dot separated ip address from the inbound socket
#	varchar hnm - hostname from the inbound socket
#	varchar nnm - nodename from the connect message
#	int ntv - node type value from the connect message
#	int nid - the node id from the connect message
#
# Rules must have the following structure eg:
#rule.<rulename>.query:select nid from connection where p1=? and p2=?
#rule.<rulename>.attributes:int p1, varchar p2
#rule.<rulename>.strategy:random
#
# The attributes can be:
#
#	int
#	varchar
#
# The strategy can be:
#
#	random - a node from the select result is picked at random
#	roundrobin - the nodes from the result set are cycled round (for legacy support, no longer sensible)
#	broadcast - send to all the nodes in the select result
#
# Extra columns can optionally be added globally so that queries can use fixed non-standard columns
# in queries rather than be forced to provide them in the routing header:
#
#extraFixedColumns:varchar shape, int size
#
# A rule using extra columns might look like:
#rule.theRule.query:select nid from connection where ntv=? and nst=0 and tid=? and shape='square' and size=42
#rule.theRule.attributes:int ntv, varchar tid
#rule.theRule.strategy:random
#
# In the above example the routing header would have to provide the rule name, ntv and tid parameters.
#
# The following two rules are implicitly defined but can be overridden here
# by uncommenting them and modifying as necessary
#
# RULE "ntt" route on node type and tenancy
#rule.ntt.query:select nid from connection where ntv=? and nst=0 and tid=?
#rule.ntt.attributes:int ntv, varchar tid
#rule.ntt.strategy:random
#
# RULE "dt" route on destination type
#rule.dt.query:select nid from connection where ntv=? and nst=0;
#rule.dt.attributes:int ntv
#rule.dt.strategy:roundrobin

# TCP Send and Receive buffer size settings.
# The receive buffer size affects the TCP window advertised to the client.
# This is important over TCP connections with large RTT.
# To be able to make full use of TCP bandwidth the TCP window must be large enough
# to accommodate slow acknowledgements.
# ewok.peer.tcp.sendbuffersize = 32KB
# ewok.peer.tcp.receivebuffersize = 32KB

# This option allows us to rate limit the outgoing ConnectionDetails
# messages from the loaddirector to each of its clients.
# This is primarily aimed at protecting the sif in large, meshed,
# deployments where, following a temporarily EWOK network split,
# the loaddirector can send a flood of ConnectionDetails that
# temporarily overwhelms the sif(s) and causes it to relay too low a
# percentage of traffic.  This, in turn, causes the watchdog to bounce
# the stack.  It can also be difficult for the sif to recover
# automatically in these meshed environments.
# This setting defaults to 4 TPS per client.
# Where there are a large number of loaddirectors it may be necessary
# to lower this to 1 TPS (the lowest possible value).
# The entire feature can be disabled by setting this property to 0 (zero).
# In this case, ConnectionDetails floods will not be prevented.
#
# ewok.server.maxConnectionDetailsTpsPerClient:4

